  package main


  import (
   "encoding/json"
   "fmt"
   "math"
   "net"
   "strconv"
   "strings"
   "time"
  )
  ////type AutoGenerated struct {
  //  ParentHits     ParentHits   `json:"hits"`
  //  TimedOut bool   `json:"timed_out"`
  //  Took     int    `json:"took"`
  //}
  //type CPU struct {
  //  HrProcessorFrwID string `json:"hrProcessorFrwID"`
  //  HrProcessorLoad  string `json:"hrProcessorLoad"`
  //}
  //type Health struct {
  //  MtxrHITemperature string `json:"mtxrHITemperature"`
  //  MtxrHIVoltage     string `json:"mtxrHIVoltage"`
  //}
  //type Address struct {
  //  IPAdEntAddr    string `json:"ipAdEntAddr"`
  //  IPAdEntIfIndex string `json:"ipAdEntIfIndex"`
  //  IPAdEntNetMask string `json:"ipAdEntNetMask"`
  //}
  //type Stats struct {
  //  IfAlias              string `json:"ifAlias"`
  //  IfHCInBroadcastPkts  string `json:"ifHCInBroadcastPkts"`
  //  IfHCInMulticastPkts  string `json:"ifHCInMulticastPkts"`
  //  IfHCInOctets         string `json:"ifHCInOctets"`
  //  IfHCInUcastPkts      string `json:"ifHCInUcastPkts"`
  //  IfHCOutBroadcastPkts string `json:"ifHCOutBroadcastPkts"`
  //  IfHCOutMulticastPkts string `json:"ifHCOutMulticastPkts"`
  //  IfHCOutOctets        string `json:"ifHCOutOctets"`
  //  IfHCOutUcastPkts     string `json:"ifHCOutUcastPkts"`
  //  IfHighSpeed          string `json:"ifHighSpeed"`
  //  IfName               string `json:"ifName"`
  //}
  //type Interfaces struct {
  //  Address       Address   `json:"address,omitempty"`
  //  IfAdminStatus string    `json:"ifAdminStatus"`
  //  IfDescr       string    `json:"ifDescr"`
  //  IfInOctets    string    `json:"ifInOctets"`
  //  IfIndex       string    `json:"ifIndex"`
  //  IfLastChange  string    `json:"ifLastChange"`
  //  IfMtu         string    `json:"ifMtu"`
  //  IfOperStatus  string    `json:"ifOperStatus"`
  //  IfOutOctets   string    `json:"ifOutOctets"`
  //  IfPhysAddress string    `json:"ifPhysAddress"`
  //  IfSpeed       string    `json:"ifSpeed"`
  //  IfType        string    `json:"ifType"`
  //  Stats         Stats     `json:"stats"`
  //  Ts            time.Time `json:"ts"`
  //}
  //type Storage struct {
  //  HrStorageAllocationFailures string `json:"hrStorageAllocationFailures"`
  //  HrStorageAllocationUnits    string `json:"hrStorageAllocationUnits"`
  //  HrStorageDescr              string `json:"hrStorageDescr"`
  //  HrStorageIndex              string `json:"hrStorageIndex"`
  //  HrStorageSize               string `json:"hrStorageSize"`
  //  HrStorageType               string `json:"hrStorageType"`
  //  HrStorageUsed               string `json:"hrStorageUsed"`
  //}
  //type System struct {
  //  SysContact  string `json:"sysContact"`
  //  SysDescr    string `json:"sysDescr"`
  //  SysName     string `json:"sysName"`
  //  SysObjectID string `json:"sysObjectID"`
  //  SysUpTime   string `json:"sysUpTime"`
  //}
  //type Source struct {
  //  Timestamp  time.Time    `json:"@timestamp"`
  //  CPU        []CPU        `json:"cpu"`
  //  Health     Health       `json:"health"`
  //  Interfaces []Interfaces `json:"interfaces"`
  //  SnmpHost   string       `json:"snmp.host"`
  //  Storage    []Storage    `json:"storage"`
  //  System     System       `json:"system"`
  //  Type       string       `json:"type"`
  //}
  //type Hits struct {
  //  ID     string      `json:"_id"`
  //  Index  string      `json:"_index"`
  //  Score  interface{} `json:"_score"`
  //  Source Source      `json:"_source"`
  //  Type   string      `json:"_type"`
  //  Sort   []int64     `json:"sort"`
  //}
  //type Total struct {
  //  Relation string `json:"relation"`
  //  Value    int    `json:"value"`
  //}
  //type ParentHits struct {
  // Hits     []Hits      `json:"hits"`
  // MaxScore interface{} `json:"max_score"`
  // Total    Total       `json:"total"`
  //}

  type DeviceDetails struct {
   ModelNumber      	string       	`json:"model_numbers"`
   SerialNumber			string				`json:"serial_number"`
   InterfaceName 		string 				`json:"interface_name"`
   Subnet 						string 				`json:"subnet"`
   IpAddress					string 				`json:"ip_address"`
   MemoryUsage				string				`json:"memory_usage"`
   DiskUsage					string				`json:"disk_usage"`
   OnlineInterfaces	string				`json:"online_interfaces"`
   CurrentUpTime			string				`json:"current_uptime"`
  }
  func main() {
  response := `{
  "_shards": {
      "failed": 0,
      "skipped": 0,
      "successful": 2,
      "total": 2
  },
  "hits": {
      "hits": [
          {
              "_id": "o_3q4XEBuhNaEL4vpaym",
              "_index": "snmpbeat-2020.05.04-000001",
              "_score": null,
              "_source": {
                  "@timestamp": "2020-05-04T22:59:41.298Z",
                  "cpu": [
                      { "hrProcessorFrwID": "0", "hrProcessorLoad": "0" },
                      { "hrProcessorFrwID": "0", "hrProcessorLoad": "0" },
                      { "hrProcessorFrwID": "0", "hrProcessorLoad": "0" },
                      { "hrProcessorFrwID": "0", "hrProcessorLoad": "0" }
                  ],
                  "health": { "mtxrHITemperature": "440", "mtxrHIVoltage": "242" },
                  "interfaces": [
                      {
                          "address": { "ipAdEntAddr": "192.168.1.3", "ipAdEntIfIndex": "1", "ipAdEntNetMask": "255.255.255.0"
                          },
                          "ifAdminStatus": "1",
                          "ifDescr": "WAN1",
                          "ifInOctets": "1396854210",
                          "ifIndex": "1",
                          "ifLastChange": "0",
                          "ifMtu": "1500",
                          "ifOperStatus": "1",
                          "ifOutOctets": "254003247",
                          "ifPhysAddress": "CC:2D:E0:B6:95:0D",
                          "ifSpeed": "1000000000",
                          "ifType": "6",
                          "stats": {
                              "ifAlias": "",
                              "ifHCInBroadcastPkts": "0",
                              "ifHCInMulticastPkts": "0",
                              "ifHCInOctets": "1396854210",
                              "ifHCInUcastPkts": "1329050",
                              "ifHCOutBroadcastPkts": "0",
                              "ifHCOutMulticastPkts": "0",
                              "ifHCOutOctets": "254003247",
                              "ifHCOutUcastPkts": "933269",
                              "ifHighSpeed": "1000",
                              "ifName": "WAN1"
                          },
                          "ts": "2020-05-04T22:59:41.298Z"
                      },
                      {
                          "address": {
                              "ipAdEntAddr": "10.5.50.1",
                              "ipAdEntIfIndex": "6",
                              "ipAdEntNetMask": "255.255.255.0"
                          },
                          "ifAdminStatus": "1",
                          "ifDescr": "BhaiFi-LAN",
                          "ifInOctets": "96560801",
                          "ifIndex": "6",
                          "ifLastChange": "0",
                          "ifMtu": "1500",
                          "ifOperStatus": "1",
                          "ifOutOctets": "1289134723",
                          "ifPhysAddress": "CC:2D:E0:B6:95:0E",
                          "ifSpeed": "0",
                          "ifType": "209",
                          "stats": {
                              "ifAlias": "default configuration",
                              "ifHCInBroadcastPkts": "0",
                              "ifHCInMulticastPkts": "0",
                              "ifHCInOctets": "96560801",
                              "ifHCInUcastPkts": "610231",
                              "ifHCOutBroadcastPkts": "0",
                              "ifHCOutMulticastPkts": "0",
                              "ifHCOutOctets": "1289134723",
                              "ifHCOutUcastPkts": "1008523",
                              "ifHighSpeed": "0",
                              "ifName": "BhaiFi-LAN"
                          },
                          "ts": "2020-05-04T22:59:41.298Z"
                      },
                      {
                          "ifAdminStatus": "1",
                          "ifDescr": "ether2",
                          "ifInOctets": "157069595",
                          "ifIndex": "2",
                          "ifLastChange": "0",
                          "ifMtu": "1500",
                          "ifOperStatus": "1",
                          "ifOutOctets": "1300792615",
                          "ifPhysAddress": "CC:2D:E0:B6:95:0E",
                          "ifSpeed": "100000000",
                          "ifType": "6",
                          "stats": {
                              "ifAlias": "",
                              "ifHCInBroadcastPkts": "0",
                              "ifHCInMulticastPkts": "0",
                              "ifHCInOctets": "157069595",
                              "ifHCInUcastPkts": "607369",
                              "ifHCOutBroadcastPkts": "0",
                              "ifHCOutMulticastPkts": "0",
                              "ifHCOutOctets": "1300792615",
                              "ifHCOutUcastPkts": "1004439",
                              "ifHighSpeed": "100",
                              "ifName": "ether2"
                          },
                          "ts": "2020-05-04T22:59:41.298Z"
                      },
                      {
                          "address": {
                              "ipAdEntAddr": "10.8.1.216",
                              "ipAdEntIfIndex": "7",
                              "ipAdEntNetMask": "255.255.248.0"
                          },
                          "ifAdminStatus": "1",
                          "ifDescr": "BhaiFi-VPN",
                          "ifInOctets": "9870115",
                          "ifIndex": "7",
                          "ifLastChange": "0",
                          "ifMtu": "1500",
                          "ifOperStatus": "1",
                          "ifOutOctets": "92297898",
                          "ifPhysAddress": "FE:D4:6C:1C:9A:C5",
                          "ifSpeed": "10000000",
                          "ifType": "1",
                          "stats": {
                              "ifAlias": "",
                              "ifHCInBroadcastPkts": "0",
                              "ifHCInMulticastPkts": "0",
                              "ifHCInOctets": "9870115",
                              "ifHCInUcastPkts": "138092",
                              "ifHCOutBroadcastPkts": "0",
                              "ifHCOutMulticastPkts": "0",
                              "ifHCOutOctets": "92297898",
                              "ifHCOutUcastPkts": "131504",
                              "ifHighSpeed": "10",
                              "ifName": "BhaiFi-VPN"
                          },
                          "ts": "2020-05-04T22:59:41.298Z"
                      }
                  ],
                  "snmp.host": "10.8.1.216",
                  "storage": [
                      {
                          "hrStorageAllocationFailures": "0",
                          "hrStorageAllocationUnits": "1024",
                          "hrStorageDescr": "main memory",
                          "hrStorageIndex": "65536",
                          "hrStorageSize": "262144",
                          "hrStorageType": "0",
                          "hrStorageUsed": "45072"
                      },
                      {
                          "hrStorageAllocationFailures": "0",
                          "hrStorageAllocationUnits": "1024",
                          "hrStorageDescr": "system disk",
                          "hrStorageIndex": "131072",
                          "hrStorageSize": "16640",
                          "hrStorageType": "0",
                          "hrStorageUsed": "12008"
                      }
                  ],
                  "system": {
                      "sysContact": "",
                      "sysDescr": "RouterOS RB750Gr3",
                      "sysName": "test_13_1",
                      "sysObjectID": "0",
                      "sysUpTime": "21469500"
                  },
                  "type": "ip-172-31-15-33"
              },
              "_type": "_doc",
              "sort": [
                  1588633181298
              ]
          }
      ],
      "max_score": null,
      "total": {
          "relation": "eq",
          "value": 388
      }
  },
  "timed_out": false,
  "took": 3
  }`
  var snmpResponse AutoGenerated
  err := json.NewDecoder(strings.NewReader(response)).Decode(&snmpResponse)
  if err != nil {
    fmt.Println("Some errror while decoding:: ", err.Error())
  }
  var res DeviceDetails
  for _, hit := range snmpResponse.ParentHits.Hits {
    res.ModelNumber = hit.Source.System.SysDescr
    systemUptime := hit.Source.System.SysUpTime
    i, err := strconv.ParseInt(systemUptime, 10, 64)
    if err != nil {
      fmt.Println(err)
    }
    uptime := i / 360000
    if (uptime >= 1) {
      day := uptime / 24
      mod := uptime % 24;
      output := fmt.Sprintf("%d%s%d%s", day, " day ", mod, " Hours ")
      res.CurrentUpTime = output;
    } else {
      output := fmt.Sprintf("%d%s%", i, " Hours ")
      res.CurrentUpTime = output;
    }
    for _, storage := range hit.Source.Storage {
      used, err := strconv.ParseInt(storage.HrStorageUsed, 10, 64)
      if err != nil {
        fmt.Println(err)
      }
      size, err := strconv.ParseInt(storage.HrStorageSize, 10, 64)
      if err != nil {
        fmt.Println(err)
      }
      if storage.HrStorageDescr == "main memory" {
        res.MemoryUsage = string((used * 100) / size)
      } else if (storage.HrStorageDescr == "system disk") {
        res.DiskUsage = string((used * 100) / size)
      }
    }
    interfaceName := "Access : "
    subnetMask := "Subnet : "
    ipAddress := "Ip Address : "
    count := 0;
    for _, ether := range hit.Source.Interfaces {
      if ether.Address.IPAdEntAddr == "" {
          continue
        } else if ether.IfDescr == "BhaiFi-VPN" {
          count++
        } else {
             interfaceName = interfaceName + ether.IfDescr + " , "
             addr := net.ParseIP(ether.Address.IPAdEntNetMask).To4()
             subnetInt , _ := net.IPv4Mask(addr[0], addr[1], addr[2], addr[3]).Size()
             subnet := strconv.Itoa(subnetInt)
             subnetMask = subnetMask + ether.Address.IPAdEntAddr + "/" + subnet + " ,"
             ipAddress = ipAddress + ether.Address.IPAdEntAddr + " , "
             count ++;
      }
    }
    onlineInterface := strconv.Itoa(count) + " of " + strconv.Itoa(len(hit.Source.Interfaces))
    res.OnlineInterfaces = onlineInterface
    res.Subnet = subnetMask
    res.IpAddress = ipAddress
    res.InterfaceName = interfaceName
    }
  fmt.Println(bytesToAny(1000000000))
  }

  func Round(val float64, roundOn float64, places int ) (newVal float64) {
   var round float64
   pow := math.Pow(10, float64(places))
   digit := pow * val
   _, div := math.Modf(digit)
   if div >= roundOn {
     round = math.Ceil(digit)
   } else {
     round = math.Floor(digit)
   }
   newVal = round / pow
   return
  }

  func bytesToAny(vlaue float64) string {
   var suffixes [5]string
   //size := vlaue
   suffixes[0] = "B"
   suffixes[1] = "KB"
   suffixes[2] = "MB"
   suffixes[3] = "GB"
   suffixes[4] = "TB"

   base := math.Log(vlaue)/math.Log(1000)
   getSize := Round(math.Pow(1000, base - math.Floor(base)), .5, 2)
   getSuffix := suffixes[int(math.Floor(base))]
   return (strconv.FormatFloat(getSize, 'f', -1, 64)+" "+string(getSuffix))
  }
